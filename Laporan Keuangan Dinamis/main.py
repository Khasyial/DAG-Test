# -*- coding: utf-8 -*-
"""Untitled10.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Tmi-O6SzbRXkBlmmjGTUE2XOJIttHJj9
"""

import json
import pandas as pd

# Daftar file JSON manual
account_files = ["account20250401.json", "account20250403.json"]

# List kosong untuk menyimpan semua data hasil parsing account
all_accounts = []

# Loop ke setiap file
for file in account_files:
    with open(file, "r", encoding="utf-8") as f:
        data = json.load(f)
        accounts = data.get("Accounts", [])
        for acc in accounts:
            all_accounts.append({
                'AccountID': acc.get('AccountID'),
                'code': acc.get('Code'),
                'Name': acc.get('Name'),
                'bank_account_number': acc.get('BankAccountNumber'),
                'currency': acc.get('CurrencyCode'),
            })

# Konversi ke DataFrame
df_accounts = pd.DataFrame(all_accounts)

# Cetak seluruh DataFrame
print(df_accounts.to_string())

import json
import pandas as pd

# Daftar file JSON manual
balance_files = ["balance_sheet_20250401.json", "balance_sheet_20250403.json"]

# List kosong untuk menyimpan semua data hasil parsing balance_sheet
all_data = []

# Loop ke setiap file
for file in balance_files:
    with open(file, "r", encoding="utf-8") as f:
        data = json.load(f)

    rows = data["Reports"][0]["Rows"]

    date_headers = []
    for row in rows:
        if row.get("RowType") == "Header":
            for cell in row["Cells"][1:]:
                date_headers.append(cell.get("Value"))
            break

    for row in rows:
        if row.get("RowType") == "Section":
            section_rows = row.get("Rows", [])
            for sec_row in section_rows:
                if sec_row.get("RowType") == "Row":
                    cells = sec_row.get("Cells", [])
                    account = cells[0].get("Value")
                    account_id = None
                    for attr in cells[0].get("Attributes", []):
                        if attr.get("Id") == "account":
                            account_id = attr.get("Value")

                    for i in range(1, len(cells)):
                        nilai_str = cells[i].get("Value", "")
                        nilai = float(nilai_str.replace(",", "")) if nilai_str else 0.0
                        tanggal = date_headers[i - 1] if i - 1 < len(date_headers) else None

                        all_data.append({
                            "account": account,
                            "account_id": account_id,
                            "date_report": tanggal,
                            "value": nilai
                        })

# Konversi ke DataFrame
df_balance = pd.DataFrame(all_data)

# Hapus duplikat (berdasarkan kombinasi penting)
df_balance = df_balance.drop_duplicates(subset=["account_id", "date_report", "value"])

# Cetak hasil
print(df_balance.to_string())

#Membuat Staging

import sqlite3

# Buat koneksi ke database SQLite
conn = sqlite3.connect("finance.db")

# Buat tabel staging untuk accounts
conn.execute("""
CREATE TABLE IF NOT EXISTS stg_accounts (
    AccountID TEXT,
    code TEXT,
    Name TEXT,
    bank_account_number TEXT,
    currency TEXT
)
""")

# Buat tabel staging untuk balance sheet
conn.execute("""
CREATE TABLE IF NOT EXISTS stg_balance_sheet (
    account TEXT,
    account_id TEXT,
    date_report TEXT,
    value REAL
)
""")

# Simpan dataframe ke dalam tabel
df_accounts.to_sql("stg_accounts", conn, if_exists="replace", index=False)
df_balance.to_sql("stg_balance_sheet", conn, if_exists="replace", index=False)

print("Data berhasil disimpan ke database.")

#Membuat Struktur Data Tabel

from datetime import datetime
import sqlite3

# Hubungkan ke database
conn = sqlite3.connect("finance.db")
cursor = conn.cursor()

# Drop tabel jika ingin mulai ulang
cursor.execute("DROP TABLE IF EXISTS dim_account")
cursor.execute("DROP TABLE IF EXISTS fact_balance_sheet")

# Buat tabel dim_account
cursor.execute("""
CREATE TABLE dim_account (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    account_id TEXT,
    code TEXT,
    name TEXT,
    bank_account_number TEXT,
    currency TEXT,
    valid_from TEXT,
    valid_to TEXT,
    is_current INTEGER
)
""")

# Buat tabel fact_balance_sheet dengan FOREIGN KEY (dim_account_id)
cursor.execute("""
CREATE TABLE fact_balance_sheet (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    account_id TEXT,
    value REAL,
    date_report TEXT,
    dim_account_id INTEGER,
    FOREIGN KEY (dim_account_id) REFERENCES dim_account(id)
)
""")

conn.commit()
conn.close()

print("Tabel dim_account dan fact_balance_sheet berhasil dibuat.")

#Update SDC Type 2

from datetime import datetime
import sqlite3

# Hubungkan ke database
conn = sqlite3.connect("finance.db")
cursor = conn.cursor()

# Ambil data staging accounts
cursor.execute("SELECT DISTINCT AccountID, code, Name, bank_account_number, currency FROM stg_accounts")
staging_accounts = cursor.fetchall()

now = datetime.now().strftime('%Y-%m-%d')

# Update dim_account (SCD Type 2)
for acc_id, code, name, bank_no, currency in staging_accounts:
    cursor.execute("""
        SELECT id, code, name, bank_account_number, currency
        FROM dim_account
        WHERE account_id = ? AND is_current = 1
    """, (acc_id,))
    current = cursor.fetchone()

    if current is None:
        cursor.execute("""
            INSERT INTO dim_account (account_id, code, name, bank_account_number, currency, valid_from, valid_to, is_current)
            VALUES (?, ?, ?, ?, ?, ?, ?, 1)
        """, (acc_id, code, name, bank_no, currency, now, '2099-09-09'))
    else:
        id_now, cur_code, cur_name, cur_bank_no, cur_currency = current
        if (cur_code != code) or (cur_name != name) or (cur_bank_no != bank_no) or (cur_currency != cur_currency):
            cursor.execute("UPDATE dim_account SET valid_to = ?, is_current = 0 WHERE id = ?", (now, id_now))
            cursor.execute("""
                INSERT INTO dim_account (account_id, code, name, bank_account_number, currency, valid_from, valid_to, is_current)
                VALUES (?, ?, ?, ?, ?, ?, ?, 1)
            """, (acc_id, code, name, bank_no, currency, now, '2099-09-09'))

# INSERT saldo + dim_account_id (JOIN ke akun aktif)
cursor.execute("""
INSERT INTO fact_balance_sheet (account_id, value, date_report, dim_account_id)
SELECT s.account_id, s.value, s.date_report, d.id
FROM stg_balance_sheet s
JOIN dim_account d ON s.account_id = d.account_id AND d.is_current = 1
LEFT JOIN fact_balance_sheet f
  ON f.account_id = s.account_id AND f.date_report = s.date_report
WHERE f.account_id IS NULL
""")

conn.commit()
conn.close()

print("Update dim_account dan isi saldo ke fact_balance_sheet berhasil.")